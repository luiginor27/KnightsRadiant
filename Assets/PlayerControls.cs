//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Windrunner"",
            ""id"": ""492b1b42-352e-4e56-bb0e-96ce59352d1f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4c34cd00-db45-4dd9-a251-434fdb431f0d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8079aec5-7c27-46d6-be10-3a8f33fe943f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateLash"",
                    ""type"": ""Value"",
                    ""id"": ""d4740a08-885c-46fc-b616-342e6b7ad3ba"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CancelLash"",
                    ""type"": ""Button"",
                    ""id"": ""65191541-5e59-466c-930d-280529d4e174"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ac5841e-7b2d-465e-8acd-c64af849e5e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dca42e2a-74e0-4cbb-b59e-74539752b57b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4efcb8f1-74ec-445c-8d01-f07da7cdaf12"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""952d7fa2-70bb-4482-8e18-295e8a310d0c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""76a726b8-587f-4d93-b770-27323a851114"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""af25e52f-03ef-432d-a020-cc9744682458"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""43cef116-1af0-4b4f-ad15-8189d74c1c44"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""640d8993-07a6-4c3b-b086-74e74b2f7346"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""03295d91-4afe-499c-8d06-243671579834"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CancelLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08da33b-95bf-4d52-bafa-f89e9fc3fe98"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""CancelLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488c740b-bb68-468e-a9a9-b1477f6acbb5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.2,max=0.8)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e4c57131-d406-4ac4-8ced-0e836afad595"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ccec8b72-2107-4a95-a3a2-1d17831060fd"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b14efe53-6d75-4248-a0aa-8d2fd5f112a0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""38dd6bbc-519c-4a40-bcbf-7861659acb9e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""50309bea-45ca-4ec3-93b8-705963c904a5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ActivateLash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Edgedancer"",
            ""id"": ""7441309a-cecc-45db-84c3-3114b1d115c4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cb0025e4-f5b7-4f8b-b5b4-2ee186588eea"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7a1059d1-ab9a-4a71-88ca-67239c6fda90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Abrasion"",
                    ""type"": ""Button"",
                    ""id"": ""04588c02-a6af-4a6b-a9f7-8e58da7915fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8082da37-1e15-4830-ae18-7d5fc833f627"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""184b6c32-4571-46b8-8ca4-45e533d6e8af"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3164709-a29a-43b5-871f-0b9e89e85219"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Abrasion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c54a533-9f5f-44e8-ab6e-7e79838f531d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Abrasion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6eb22c1c-07b7-4f5d-a940-222ec12a30a8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""53c6f65c-2a0c-49c3-a5d6-ac4d46e0ec59"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4404e76c-c2dc-49c7-9b29-b4ae014629f1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6f3025bc-98dc-466f-9a0e-5c207248161f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3767f53b-4bce-4d5e-a095-38d722055cea"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""27d939d2-006f-4298-b9a0-272f6b780c38"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Lightweaver"",
            ""id"": ""22a884f3-f45f-4aa2-93b4-1fc63bcb3749"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""50e75306-7890-4629-94f5-cda779d9878f"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7d2205b1-5534-4b65-807a-433aa80f9c49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Illumination"",
                    ""type"": ""Button"",
                    ""id"": ""3c211f61-6d71-4693-8d58-367a5efce51b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""3def7e5b-75d9-437a-874d-dff4614011a9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""49e6aa21-bb3b-4f5b-bb36-8c6ff51d8e5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8f324312-2f77-4bdd-b4d4-ce7a585abfb8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c3f81c4d-be04-4f68-860e-8ceaca6342e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ef93369f-1f68-40b3-8462-b0f72eca7d1e"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""af74a4cf-c037-4741-8c23-3d584c2b03ef"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bac11bab-28b0-418e-addc-b36d5e31d8fa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0f4fb82-fcd3-4ddb-88fd-da5bdcd00ca4"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33290dc0-07b2-406e-a0b2-4adbcb4b9f64"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Illumination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f313c343-17e6-42d3-b10e-3d825a342e0c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Illumination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainScreen"",
            ""id"": ""9d1cf3e2-2af1-490c-ae0d-873e4b96f089"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""66e13401-7296-4289-a0f1-c1515df75e64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e06cb07-07dc-41ab-851b-c9580b46929e"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3131923-8fda-452d-874b-3fdbd2d46636"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Level"",
            ""id"": ""2ee9a5cc-4291-4446-859d-e2e92cf9a19f"",
            ""actions"": [
                {
                    ""name"": ""ReturnToSelection"",
                    ""type"": ""Button"",
                    ""id"": ""c6b0fbcb-f4fc-49be-aea1-5ecd0abc90e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipTutorial"",
                    ""type"": ""Button"",
                    ""id"": ""c75e342e-4d20-4735-b386-ff84d09c6580"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""95d09022-bd0e-4ca7-8603-46f85578c5df"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ReturnToSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0810c6eb-aa6c-4a63-ad0c-61e1d8750018"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""ReturnToSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d711c04-d002-4063-b75d-f59b31623c86"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""SkipTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4c5d73e-bd3a-4e62-a8b4-a8c6bab59318"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SkipTutorial"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Windrunner
        m_Windrunner = asset.FindActionMap("Windrunner", throwIfNotFound: true);
        m_Windrunner_Move = m_Windrunner.FindAction("Move", throwIfNotFound: true);
        m_Windrunner_Jump = m_Windrunner.FindAction("Jump", throwIfNotFound: true);
        m_Windrunner_ActivateLash = m_Windrunner.FindAction("ActivateLash", throwIfNotFound: true);
        m_Windrunner_CancelLash = m_Windrunner.FindAction("CancelLash", throwIfNotFound: true);
        // Edgedancer
        m_Edgedancer = asset.FindActionMap("Edgedancer", throwIfNotFound: true);
        m_Edgedancer_Move = m_Edgedancer.FindAction("Move", throwIfNotFound: true);
        m_Edgedancer_Jump = m_Edgedancer.FindAction("Jump", throwIfNotFound: true);
        m_Edgedancer_Abrasion = m_Edgedancer.FindAction("Abrasion", throwIfNotFound: true);
        // Lightweaver
        m_Lightweaver = asset.FindActionMap("Lightweaver", throwIfNotFound: true);
        m_Lightweaver_Move = m_Lightweaver.FindAction("Move", throwIfNotFound: true);
        m_Lightweaver_Jump = m_Lightweaver.FindAction("Jump", throwIfNotFound: true);
        m_Lightweaver_Illumination = m_Lightweaver.FindAction("Illumination", throwIfNotFound: true);
        // MainScreen
        m_MainScreen = asset.FindActionMap("MainScreen", throwIfNotFound: true);
        m_MainScreen_Start = m_MainScreen.FindAction("Start", throwIfNotFound: true);
        // Level
        m_Level = asset.FindActionMap("Level", throwIfNotFound: true);
        m_Level_ReturnToSelection = m_Level.FindAction("ReturnToSelection", throwIfNotFound: true);
        m_Level_SkipTutorial = m_Level.FindAction("SkipTutorial", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Windrunner
    private readonly InputActionMap m_Windrunner;
    private IWindrunnerActions m_WindrunnerActionsCallbackInterface;
    private readonly InputAction m_Windrunner_Move;
    private readonly InputAction m_Windrunner_Jump;
    private readonly InputAction m_Windrunner_ActivateLash;
    private readonly InputAction m_Windrunner_CancelLash;
    public struct WindrunnerActions
    {
        private @PlayerControls m_Wrapper;
        public WindrunnerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Windrunner_Move;
        public InputAction @Jump => m_Wrapper.m_Windrunner_Jump;
        public InputAction @ActivateLash => m_Wrapper.m_Windrunner_ActivateLash;
        public InputAction @CancelLash => m_Wrapper.m_Windrunner_CancelLash;
        public InputActionMap Get() { return m_Wrapper.m_Windrunner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WindrunnerActions set) { return set.Get(); }
        public void SetCallbacks(IWindrunnerActions instance)
        {
            if (m_Wrapper.m_WindrunnerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnJump;
                @ActivateLash.started -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnActivateLash;
                @ActivateLash.performed -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnActivateLash;
                @ActivateLash.canceled -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnActivateLash;
                @CancelLash.started -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnCancelLash;
                @CancelLash.performed -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnCancelLash;
                @CancelLash.canceled -= m_Wrapper.m_WindrunnerActionsCallbackInterface.OnCancelLash;
            }
            m_Wrapper.m_WindrunnerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ActivateLash.started += instance.OnActivateLash;
                @ActivateLash.performed += instance.OnActivateLash;
                @ActivateLash.canceled += instance.OnActivateLash;
                @CancelLash.started += instance.OnCancelLash;
                @CancelLash.performed += instance.OnCancelLash;
                @CancelLash.canceled += instance.OnCancelLash;
            }
        }
    }
    public WindrunnerActions @Windrunner => new WindrunnerActions(this);

    // Edgedancer
    private readonly InputActionMap m_Edgedancer;
    private IEdgedancerActions m_EdgedancerActionsCallbackInterface;
    private readonly InputAction m_Edgedancer_Move;
    private readonly InputAction m_Edgedancer_Jump;
    private readonly InputAction m_Edgedancer_Abrasion;
    public struct EdgedancerActions
    {
        private @PlayerControls m_Wrapper;
        public EdgedancerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Edgedancer_Move;
        public InputAction @Jump => m_Wrapper.m_Edgedancer_Jump;
        public InputAction @Abrasion => m_Wrapper.m_Edgedancer_Abrasion;
        public InputActionMap Get() { return m_Wrapper.m_Edgedancer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EdgedancerActions set) { return set.Get(); }
        public void SetCallbacks(IEdgedancerActions instance)
        {
            if (m_Wrapper.m_EdgedancerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnJump;
                @Abrasion.started -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnAbrasion;
                @Abrasion.performed -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnAbrasion;
                @Abrasion.canceled -= m_Wrapper.m_EdgedancerActionsCallbackInterface.OnAbrasion;
            }
            m_Wrapper.m_EdgedancerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Abrasion.started += instance.OnAbrasion;
                @Abrasion.performed += instance.OnAbrasion;
                @Abrasion.canceled += instance.OnAbrasion;
            }
        }
    }
    public EdgedancerActions @Edgedancer => new EdgedancerActions(this);

    // Lightweaver
    private readonly InputActionMap m_Lightweaver;
    private ILightweaverActions m_LightweaverActionsCallbackInterface;
    private readonly InputAction m_Lightweaver_Move;
    private readonly InputAction m_Lightweaver_Jump;
    private readonly InputAction m_Lightweaver_Illumination;
    public struct LightweaverActions
    {
        private @PlayerControls m_Wrapper;
        public LightweaverActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Lightweaver_Move;
        public InputAction @Jump => m_Wrapper.m_Lightweaver_Jump;
        public InputAction @Illumination => m_Wrapper.m_Lightweaver_Illumination;
        public InputActionMap Get() { return m_Wrapper.m_Lightweaver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LightweaverActions set) { return set.Get(); }
        public void SetCallbacks(ILightweaverActions instance)
        {
            if (m_Wrapper.m_LightweaverActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnJump;
                @Illumination.started -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnIllumination;
                @Illumination.performed -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnIllumination;
                @Illumination.canceled -= m_Wrapper.m_LightweaverActionsCallbackInterface.OnIllumination;
            }
            m_Wrapper.m_LightweaverActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Illumination.started += instance.OnIllumination;
                @Illumination.performed += instance.OnIllumination;
                @Illumination.canceled += instance.OnIllumination;
            }
        }
    }
    public LightweaverActions @Lightweaver => new LightweaverActions(this);

    // MainScreen
    private readonly InputActionMap m_MainScreen;
    private IMainScreenActions m_MainScreenActionsCallbackInterface;
    private readonly InputAction m_MainScreen_Start;
    public struct MainScreenActions
    {
        private @PlayerControls m_Wrapper;
        public MainScreenActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_MainScreen_Start;
        public InputActionMap Get() { return m_Wrapper.m_MainScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainScreenActions set) { return set.Get(); }
        public void SetCallbacks(IMainScreenActions instance)
        {
            if (m_Wrapper.m_MainScreenActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_MainScreenActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MainScreenActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MainScreenActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_MainScreenActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public MainScreenActions @MainScreen => new MainScreenActions(this);

    // Level
    private readonly InputActionMap m_Level;
    private ILevelActions m_LevelActionsCallbackInterface;
    private readonly InputAction m_Level_ReturnToSelection;
    private readonly InputAction m_Level_SkipTutorial;
    public struct LevelActions
    {
        private @PlayerControls m_Wrapper;
        public LevelActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ReturnToSelection => m_Wrapper.m_Level_ReturnToSelection;
        public InputAction @SkipTutorial => m_Wrapper.m_Level_SkipTutorial;
        public InputActionMap Get() { return m_Wrapper.m_Level; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelActions set) { return set.Get(); }
        public void SetCallbacks(ILevelActions instance)
        {
            if (m_Wrapper.m_LevelActionsCallbackInterface != null)
            {
                @ReturnToSelection.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnReturnToSelection;
                @ReturnToSelection.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnReturnToSelection;
                @ReturnToSelection.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnReturnToSelection;
                @SkipTutorial.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnSkipTutorial;
                @SkipTutorial.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnSkipTutorial;
                @SkipTutorial.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnSkipTutorial;
            }
            m_Wrapper.m_LevelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ReturnToSelection.started += instance.OnReturnToSelection;
                @ReturnToSelection.performed += instance.OnReturnToSelection;
                @ReturnToSelection.canceled += instance.OnReturnToSelection;
                @SkipTutorial.started += instance.OnSkipTutorial;
                @SkipTutorial.performed += instance.OnSkipTutorial;
                @SkipTutorial.canceled += instance.OnSkipTutorial;
            }
        }
    }
    public LevelActions @Level => new LevelActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IWindrunnerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnActivateLash(InputAction.CallbackContext context);
        void OnCancelLash(InputAction.CallbackContext context);
    }
    public interface IEdgedancerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAbrasion(InputAction.CallbackContext context);
    }
    public interface ILightweaverActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnIllumination(InputAction.CallbackContext context);
    }
    public interface IMainScreenActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
    public interface ILevelActions
    {
        void OnReturnToSelection(InputAction.CallbackContext context);
        void OnSkipTutorial(InputAction.CallbackContext context);
    }
}
